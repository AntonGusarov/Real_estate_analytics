#%%
import pandas as pd
import numpy as np
import re

#%%
def import_parsed_tables(filenames_list):
    """
    Input: list of .xls file names with raw parsed data.
    Output: list of raw pandas dataframes.
    """
    dataframes = list()
    for file_name in filenames_list:
        df = pd.read_excel(file_name).T
        df.columns = df.iloc[0]  # add atribute names
        df = df.drop(df.index[0])  # drop the row with attribute names
        df = df.drop('URL', axis=1)
        df = df.reset_index()
        df = df.drop('index', axis=1)
        dataframes.append(df)
    return dataframes

filenames = ['out100-200.xlsx', 
    'out200-300.xlsx', 
    'out300-500.xlsx', 
    'out500-600_59.xlsx', 
    'out600-1000.xlsx']
dfs = import_parsed_tables(filenames)

# print(len(dfs))  # check the number of dataframes
# print([d.shape for d in dfs])  # shapes of these dataframes

data = pd.concat(dfs, ignore_index=True)  # merge df-s into the single one
print(data.shape)
print(data.info())

# %%
# Run over each column and process (clean) the data
# ================================================
# 1. 'Аварийный'
# ------------------------------------------------
# data['Аварийный']  # look at the column data
# set(data['Аварийный'])  # look at the different entries
# Good one, nothing to fix!

# 2. 'Адрес'
# ------------------------------------------------
# data['Адрес'] 
# print(type(data['Адрес'][42]))
# Ok, nothing to fix now!
# TODO: translate addresses to coordinates

# %%
# 3. 'Арендные каникулы'
# ------------------------------------------------
# data['Арендные каникулы']
# set(data['Арендные каникулы'])
# Make '-' = NaN:
data['Арендные каникулы'] = data['Арендные каникулы'].replace('-', np.NaN)
# set(data['Арендные каникулы']) # check

#%%
# 4. 'Витринные окна'
# ------------------------------------------------
# set(data['Витринные окна'])
# Good one, nothing to fix!

# %%
# 5. 'Вход'
# ------------------------------------------------
# set(data['Вход'])
# Good one, nothing to fix!

# %%
# 6. 'Высота потолков'
# ------------------------------------------------
# set(data['Высота потолков'])
# Use regular expressions to transform str to numeric:
for i, val in enumerate(data['Высота потолков']):
    if pd.notna(val):
        val_mod = re.sub(r'м', r'', val)
        data['Высота потолков'][i] = float(re.sub(r'[,]', r'.', val_mod))

data['Высота потолков'] = pd.to_numeric(data['Высота потолков'])
# set(data['Высота потолков'])  # check

# %%
# 7. 'Год постройки'
# ------------------------------------------------
data['Год постройки'] = data['Год постройки'].replace('-', np.NaN)
data['Год постройки'] = pd.to_numeric(data['Год постройки'])
# print(data['Год постройки'])

# %%
# 8. 'Девелопер'
# ------------------------------------------------
# print(set(data['Девелопер']))

# %%
# 9. 'Динамика ставки за год жилая' -> 'Динамика ставки за год жилая, %'
# ---------------------------------------------------------------------------------
# print(set(data['Динамика ставки за год жилая']))
data['Динамика ставки за год жилая'] = data['Динамика ставки за год жилая'].replace('-', np.NaN)
data = data.rename(columns={'Динамика ставки за год жилая': 'Динамика ставки за год жилая, %'})
for i, val in enumerate(data['Динамика ставки за год жилая, %']):
    if pd.notna(val):
        val_mod = re.sub(r'%', r'', val)
        val_mod = re.sub(r'\s', r'', val_mod)
        val_mod = re.sub(r',', r'.', val_mod)
        data['Динамика ставки за год жилая, %'][i] = float(val_mod)

data['Динамика ставки за год жилая, %'] = pd.to_numeric(data['Динамика ставки за год жилая, %'])
# print(set(data['Динамика ставки за год жилая, %']))

# %%
# 10. 'Динамика цены за м2 за год жилая' -> 'Динамика цены за м2 за год жилая, %'
# ---------------------------------------------------------------------------------
data['Динамика цены за м2 за год жилая'] = data['Динамика цены за м2 за год жилая'].replace('-', np.NaN)
data = data.rename(columns={'Динамика цены за м2 за год жилая': 'Динамика цены за м2 за год жилая, %'})
for i, val in enumerate(data['Динамика цены за м2 за год жилая, %']):
    if pd.notna(val):
        val_mod = re.sub(r'%', r'', val)
        val_mod = re.sub(r'\s', r'', val_mod)
        val_mod = re.sub(r',', r'.', val_mod)
        data['Динамика цены за м2 за год жилая, %'][i] = float(val_mod)

data['Динамика цены за м2 за год жилая, %'] = pd.to_numeric(data['Динамика цены за м2 за год жилая, %'])
# print(set(data['Динамика цены за м2 за год жилая, %']))

# %%
# 11. 'Категория здания'
# --------------------------------------
# set(data['Категория здания'])

# %%
# 12. 'Квартир' -> 'Количество квартир'
# --------------------------------------
# set(data['Квартир'])
data['Квартир'] = data['Квартир'].replace('-', np.NaN)
data = data.rename(columns={'Квартир': 'Количество квартир'})
data['Количество квартир'] = pd.to_numeric(data['Количество квартир'])
# print(set(data['Количество квартир']))

# %%
# 13. 'Квартиры и планировки'
# --------------------------------------
# set(data['Квартиры и планировки'])
data = data.drop(columns=['Квартиры и планировки'])  # remove this column

# %%
# 14. 'Количество мест'
# --------------------------------------
# set(data['Количество мест'])
data['Количество мест'] = pd.to_numeric(data['Количество мест'])

# %%
# 15. 'Количество мокрых точек'
# --------------------------------------
data['Количество мокрых точек'] = pd.to_numeric(data['Количество мокрых точек'])
# set(data['Количество мокрых точек'])

# %%
# 16. 'Комиссия от клиента' -> 'Комиссия от клиента, %'
# ------------------------------------------------------
data['Комиссия от клиента'] = data['Комиссия от клиента'].replace('-', np.NaN)
data = data.rename(columns={'Комиссия от клиента': 'Комиссия от клиента, %'})
for i, val in enumerate(data['Комиссия от клиента, %']):
    if pd.notna(val):
        val_mod = re.sub(r'%', r'', val)
        data['Комиссия от клиента, %'][i] = float(val_mod)

data['Комиссия от клиента, %'] = pd.to_numeric(data['Комиссия от клиента, %'])
# set(data['Комиссия от клиента, %'])

# %%
# 17. 'Коммунальные платежи'
# ------------------------------------------------------
data['Коммунальные платежи'] = data['Коммунальные платежи'].replace('-', np.NaN)
# set(data['Коммунальные платежи'])

# %%
# 18. 'Конструктив и состояние'
# ------------------------------------------------------
# set(data['Конструктив и состояние'])
data = data.drop(columns=['Конструктив и состояние'])  # remove the column

# %%
# 19. 'Масштаб торгового комплекса'
# ------------------------------------------------------
# set(data['Масштаб торгового комплекса'])

# %%
# 20. 'Материал пола'
# ------------------------------------------------------
# set(data['Материал пола'])

# %%
# 21. 'Материалы стен'
# ------------------------------------------------------
# set(data['Материалы стен'])

# %%
# 22. 'Минимальный срок аренды' -> 'Минимальный срок аренды, мес'
# ----------------------------------------------------------------
# set(data['Минимальный срок аренды'])
data['Минимальный срок аренды'] = data['Минимальный срок аренды'].replace('-', np.NaN)
data = data.rename(columns={'Минимальный срок аренды': 'Минимальный срок аренды, мес'})
for i, val in enumerate(data['Минимальный срок аренды, мес']):
    if pd.notna(val):
        val_mod = re.sub(r'\D', r'', val)
        # print(val_mod)
        data['Минимальный срок аренды, мес'][i] = float(val_mod)

data['Минимальный срок аренды, мес'] = pd.to_numeric(data['Минимальный срок аренды, мес'])
# set(data['Минимальный срок аренды, мес'])

# %%
# 23. 'Мощность, кВт'
# ----------------------------------------------------------------
# set(data['Мощность, кВт'])
data['Мощность, кВт'] = pd.to_numeric(data['Мощность, кВт'])

# %%
# 24. 'Налог' -> 'Налог' + 'Размер НДС'
# ----------------------------------------------------------------
vals = list()
for i, val in enumerate(data['Налог']):
    if pd.notna(val):
        val = re.sub(r'\s', '', val)
        val = re.findall(r'\d+', val) # NOTE: if val <= 100 this is %
        if len(val) == 0:
            val = np.nan
        else:
            val = [float(v) for v in val]
        vals.append(val)
data.insert(22, 'Размер НДС', vals, True)  # insert new column

for i, val in enumerate(data['Налог']):
    if pd.notna(val):
        val = re.findall(r'^\w*\s*\w*', val)
        # print(val[0])
        data['Налог'][i] = val[0]
data['Налог'] = data['Налог'].replace('НДС ', 'НДС, %')

# print(set(data['Налог']))

#%%
# 25. 'Номер налоговой'
# ----------------------------------------------------------------
# set(data['Номер налоговой'])
data['Номер налоговой'] = pd.to_numeric(data['Номер налоговой'])

#%%
# 26. 'Обеспечительный платеж' -> 'Обеспечительный платеж, ₽'
# ----------------------------------------------------------------
# set(data['Обеспечительный платеж'])
data['Обеспечительный платеж'] = data['Обеспечительный платеж'].replace('-', np.NaN)
data = data.rename(columns={'Обеспечительный платеж': 'Обеспечительный платеж, ₽'})

for i, val in enumerate(data['Обеспечительный платеж, ₽']):
    if pd.notna(val):
        val = re.sub(r'\s', '', val)
        val = re.findall(r'\d+', val)
        if len(val) == 0:
            val = np.nan
        else:
            val = [float(v) for v in val]
        # print(val)
        data['Обеспечительный платеж, ₽'][i] = val[0]

data['Обеспечительный платеж, ₽'] = pd.to_numeric(data['Обеспечительный платеж, ₽'])

# %%
# 27. 'Общая площадь' -> 'Общая площадь, м2'
# ----------------------------------------------------------------
# set(data['Общая площадь'])
data['Общая площадь'] = data['Общая площадь'].replace('-', np.NaN)
data = data.rename(columns={'Общая площадь': 'Общая площадь, м2'})

for i, val in enumerate(data['Общая площадь, м2']):
    if pd.notna(val):
        val_mod = re.sub(r',', '.', val)
        val_mod = re.sub(r'\s*', '', val_mod)
        val_mod = re.findall(r'\d+(?:\.\d+)?', val_mod)
        data['Общая площадь, м2'][i] = float(val_mod[0])

data['Общая площадь, м2'] = pd.to_numeric(data['Общая площадь, м2'])

# %%
# 28. 'Описание'
# ----------------------------------------------------------------
# data['Описание'].describe()

# %%
# 29. 'Парковка'
# ----------------------------------------------------------------
# set(data['Парковка'])

# %%
# 30. 'Площадь участка' -> 'Площадь участка, га'
# ----------------------------------------------------------------
# set(data['Площадь участка'])
data['Площадь участка'] = data['Площадь участка'].replace('-', np.NaN)
data = data.rename(columns={'Площадь участка': 'Площадь участка, га'})

for i, val in enumerate(data['Площадь участка, га']):
    if pd.notna(val):
        val_mod = re.sub(r',', '.', val)
        val_mod = re.sub(r'\s*', '', val_mod)
        val_mod = re.findall(r'\d+(?:\.\d+)?', val_mod)
        # print(val_mod)
        data['Площадь участка, га'][i] = float(val_mod[0])

data['Площадь участка, га'] = pd.to_numeric(data['Площадь участка, га'])
# data['Площадь участка, га'].describe()   

# %%
# 31. 'Подъездов' -> 'Количество подъездов'
# ----------------------------------------------------------------
# set(data['Подъездов'])
data['Подъездов'] = data['Подъездов'].replace('-', np.NaN)
data = data.rename(columns={'Подъездов': 'Количество подъездов'})
data['Количество подъездов'] = pd.to_numeric(data['Количество подъездов'])
# data['Количество подъездов'].describe()   

# %%
# 31. 'Предоплата' -> 'Предоплата, мес.'
# ----------------------------------------------------------------
# set(data['Предоплата'])
data['Предоплата'] = data['Предоплата'].replace('-', np.NaN)
data = data.rename(columns={'Предоплата': 'Предоплата, мес.'})

for i, val in enumerate(data['Предоплата, мес.']):
    if pd.notna(val):
        val_mod = re.sub(r'\D', '', val)
        data['Предоплата, мес.'][i] = float(val_mod)

data['Предоплата, мес.'] = pd.to_numeric(data['Предоплата, мес.'])
# data['Предоплата, мес.'].describe()   

# %%
# 32. 'Состояние'
# ----------------------------------------------------------------
# set(data['Состояние'])

# %%
# 33. 'Средняя цена за м2' -> 'Средняя цена за м2, ₽'
# ----------------------------------------------------------------
# set(data['Средняя цена за м2'])
data['Средняя цена за м2'] = data['Средняя цена за м2'].replace('-', np.NaN)
data = data.rename(columns={'Средняя цена за м2': 'Средняя цена за м2, ₽'})
set(data['Средняя цена за м2, ₽'])

for i, val in enumerate(data['Средняя цена за м2, ₽']):
    if pd.notna(val):
        val_mod = re.sub(r'\D', '', val)
        data['Средняя цена за м2, ₽'][i] = float(val_mod)

data['Средняя цена за м2, ₽'] = pd.to_numeric(data['Средняя цена за м2, ₽'])
# data['Средняя цена за м2, ₽'].describe()   

# %%
# 34. 'Срок аренды'
# ----------------------------------------------------------------
# set(data['Срок аренды'])

# %%
# 35. 'Ставка'
# ----------------------------------------------------------------
# set(data['Ставка'])
data['Ставка'] = data['Ставка'].replace('-', np.NaN)
data = data.rename(columns={'Ставка': 'Ставка ₽ за м²/год'})

for i, val in enumerate(data['Ставка ₽ за м²/год']):
    if pd.notna(val):
        val_mod = re.sub(r'\D', '', val)
        # print(val_mod)
        data['Ставка ₽ за м²/год'][i] = float(val_mod)

data['Ставка ₽ за м²/год'] = pd.to_numeric(data['Ставка ₽ за м²/год'])
# data['Ставка ₽ за м²/год'].describe()          

# %%
# 36. 'Статус участка'
# ----------------------------------------------------------------
# set(data['Статус участка'])

# %%
# 37. 'Стоимость'
# ----------------------------------------------------------------
# set(data['Стоимость'])

# %%
# 38. 'Стоимость парковки'
# ----------------------------------------------------------------
# set(data['Стоимость парковки'])
data = data.drop(columns=['Стоимость парковки'])  # remove the column

# %%
# 39. 'Тип аренды'
# ----------------------------------------------------------------
# set(data['Тип аренды'])
data['Тип аренды'] = data['Тип аренды'].replace('-', np.NaN)

# %%
# 40. 'Тип здания'
# ----------------------------------------------------------------
# set(data['Тип здания'])

# %%
# 41. 'Управляющая компания'
# ----------------------------------------------------------------
# set(data['Управляющая компания'])

# %%
# 42. 'Цена'
# ----------------------------------------------------------------
# set(data['Цена'])
data['Цена'] = data['Цена'].replace('-', np.NaN)
data = data.rename(columns={'Цена': 'Цена, ₽/мес.'})

for i, val in enumerate(data['Цена, ₽/мес.']):
    if pd.notna(val):
        val = re.sub(r'\s', '', val)
        val = re.findall(r'\d+', val) # NOTE: if val <= 100 this is %
        if len(val) == 0:
            val = np.nan
        else:
            val = [float(v) for v in val]
        data['Цена, ₽/мес.'][i] = val

# data['Цена, ₽/мес.']

# %%
# 43. 'Эксплуатационные расходы'
# ----------------------------------------------------------------
# set(data['Эксплуатационные расходы'])
data['Эксплуатационные расходы'] = data['Эксплуатационные расходы'].replace('-', np.NaN)

#%%
# 44. 'Этажность'
# ----------------------------------------------------------------
# set(data['Этажность'])
data['Этажность'] = data['Этажность'].replace('-', np.NaN)
data['Этажность'] = pd.to_numeric(data['Этажность'])
# data['Этажность'].describe()      
    
# %%
# 45. 'Юридический адрес'
# ----------------------------------------------------------------
# set(data['Юридический адрес'])

#%%
# Finally, save the cleaned dataset:
data.to_pickle('./comm_real_estate_100-100_sqm.pkl')
# %%
